{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/baby-names-spa/src/components/BabyNameForm.jsx\";\nimport React from 'react';\nimport { get, patch } from 'axios';\nimport Container from 'react-bootstrap/Container';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getBabies, addBaby, babyName } from '../redux/actions/baby-actions';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './BabyNameForm.css';\nimport { toast } from 'react-toastify';\n\nconst encode = data => {\n  return Object.keys(data).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key])).join(\"&\");\n};\n\nconst BabyNameForm = () => {\n  const dispatch = useDispatch();\n  const {\n    baby\n  } = useSelector(state => ({\n    baby: state.babiesList.baby\n  }));\n  const [babies, setBabies] = React.useState([]);\n  const [getBabiesNow, setGetBabiesNow] = React.useState(false); // const [ baby, setBaby] = React.useState({ \n  //     \"list-id\": parseInt(localStorage.getItem('list_id')),\n  //     \"baby-name\": \"\",\n  //     enabled: true\n  // })\n\n  React.useEffect(() => {\n    const gettingBabies = async () => {\n      try {\n        console.log('getting babies'); // const response = await get('http://localhost:8888/.netlify/functions/babies-index')\n\n        const response = await get('http://localhost:8888/.netlify/functions/babies-index'); // const response = await get('https://baby-maker-2000.netlify.app/.netlify/functions/babies-index')\n        // if (response.status === 200){\n        //         dispatch(getBabies(response.data))\n        // }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    gettingBabies();\n  }, []);\n\n  const showBabies = () => {\n    const sortedBabies = babies.sort();\n\n    if (sortedBabies === undefined) {\n      return /*#__PURE__*/React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return sortedBabies.map(baby => {\n        const position = sortedBabies.indexOf(baby) + 1;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: baby.baby_name,\n          style: {\n            cursor: \"pointer\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 30\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          style: {\n            textDecorationLine: baby.enabled ? \"none\" : \"line-through\"\n          },\n          onClick: handleClick,\n          id: baby.baby_name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }\n        }, position, \". \", baby.baby_name)));\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    console.log('getting updated babies list'); // if (getBabiesNow){\n    //     setGetBabiesNow(false)\n    //     const getBabies = async () => {\n    //         try{\n    //             const response = await get('http://localhost:8888/.netlify/functions/babies-index')\n    //             // const response = await get('https://baby-maker-2000.netlify.app/.netlify/functions/babies-index')\n    //             if (response.data.length === babies.length) {\n    //                 toast.error('Baby already made')\n    //             } else {\n    //                 toast.success(`Baby ${baby['baby-name']} was made!`)\n    //                 setBabies(response.data)\n    //             }\n    //         } catch(err) {\n    //         }\n    //     }\n    //     getBabies()\n    // }\n  }, [babies.length]);\n\n  const handleClick = async e => {\n    e.preventDefault();\n    let thisBaby = {};\n\n    for (let i = 0; i < babies.length; i++) {\n      if (e.target.id === babies[i].baby_name) {\n        thisBaby = babies[i];\n      }\n    }\n\n    if (thisBaby.enabled) {\n      thisBaby.enabled = false;\n    } else {\n      thisBaby.enabled = true;\n    }\n\n    let element = document.getElementById(thisBaby.baby_name);\n    element.style.textDecorationLine = thisBaby.enabled ? \"none\" : \"line-through\";\n    let babyRequest = {\n      \"baby\": {\n        \"list_id\": thisBaby.list_id,\n        \"baby_name\": thisBaby.baby_name,\n        \"enabled\": thisBaby.enabled\n      }\n    };\n\n    try {\n      await patch('https://baby-maker-2000.netlify.app/.netlify/functions/update-baby', babyRequest);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleSubmit = e => {\n    let newBabyArray = babies;\n    newBabyArray.push(baby);\n    dispatch(getBabies(newBabyArray));\n    fetch(\"/index.html\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: encode({\n        \"form-name\": \"baby\",\n        ...baby\n      })\n    }).then(() => alert(\"Submitted!\")).catch(error => console.log(error));\n    setGetBabiesNow(true);\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    style: {\n      margin: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  }, \"The Baby Maker 2000\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, \"Simply put in a name and it'll be saved!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }, \"Note: To return to this list save your URL some where safe\"), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  }, \"Name! \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    required: true,\n    id: \"name-input\",\n    placeholder: \"Baby Name!\",\n    type: \"text\",\n    name: \"baby-name\",\n    value: baby[\"baby-name\"],\n    onChange: e => dispatch(babyName(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    hidden: true,\n    type: \"number\",\n    name: \"list-id\",\n    value: baby[\"list-id\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    id: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 33\n    }\n  }, \"Make baby!\"))))), /*#__PURE__*/React.createElement(Col, {\n    style: {\n      fontSize: \"24px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Baby Names!\"), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"name-list\",\n    style: {\n      listStyle: \"none\",\n      overflowAnchor: \"bottom\",\n      overflow: \"scroll\",\n      height: \"50vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, showBabies()))));\n};\n\nexport default BabyNameForm;","map":{"version":3,"sources":["/home/kevin/Documents/baby-names-spa/src/components/BabyNameForm.jsx"],"names":["React","get","patch","Container","useDispatch","useSelector","getBabies","addBaby","babyName","Row","Col","Jumbotron","Spinner","toast","encode","data","Object","keys","map","key","encodeURIComponent","join","BabyNameForm","dispatch","baby","state","babiesList","babies","setBabies","useState","getBabiesNow","setGetBabiesNow","useEffect","gettingBabies","console","log","response","err","showBabies","sortedBabies","sort","undefined","position","indexOf","baby_name","cursor","textDecorationLine","enabled","handleClick","length","e","preventDefault","thisBaby","i","target","id","element","document","getElementById","style","babyRequest","list_id","handleSubmit","newBabyArray","push","fetch","method","headers","body","then","alert","catch","error","margin","value","fontSize","textAlign","listStyle","overflowAnchor","overflow","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { get, patch } from 'axios'\nimport Container from 'react-bootstrap/Container'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getBabies, addBaby, babyName } from '../redux/actions/baby-actions'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Spinner from 'react-bootstrap/Spinner'\nimport './BabyNameForm.css'\nimport { toast } from 'react-toastify';\n\nconst encode = (data) => {\n    return Object.keys(data)\n        .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n        .join(\"&\")\n}\n\nconst BabyNameForm = () => {\n\n    const dispatch = useDispatch()\n    const { baby } = useSelector(state => ({ baby: state.babiesList.baby}))\n\n    const [ babies, setBabies ] = React.useState([])\n    const [ getBabiesNow, setGetBabiesNow ] = React.useState(false)\n    // const [ baby, setBaby] = React.useState({ \n    //     \"list-id\": parseInt(localStorage.getItem('list_id')),\n    //     \"baby-name\": \"\",\n    //     enabled: true\n    // })\n    \n\n    React.useEffect(() => {\n        const gettingBabies = async () => {\n           try {\n               console.log('getting babies')\n                // const response = await get('http://localhost:8888/.netlify/functions/babies-index')\n                const response = await get ('http://localhost:8888/.netlify/functions/babies-index')\n                // const response = await get('https://baby-maker-2000.netlify.app/.netlify/functions/babies-index')\n                // if (response.status === 200){\n                //         dispatch(getBabies(response.data))\n                // }\n           } catch (err){\n                console.log(err)\n           }\n        }\n        gettingBabies();\n    }, [])\n\n\n\n    const showBabies = () => {\n        const sortedBabies = babies.sort()\n        if(sortedBabies === undefined) {\n            return <Spinner animation=\"border\" role=\"status\" />\n        } else {\n            return sortedBabies.map(baby => {\n                const position = sortedBabies.indexOf(baby) + 1\n                return(\n                    <div key={baby.baby_name} style={{cursor: \"pointer\"}}>\n                        <li ><br></br>\n                            <p style={{textDecorationLine: baby.enabled ? \"none\" : \"line-through\"}} onClick={handleClick} id={baby.baby_name} >\n                               {position}. {baby.baby_name}\n                            </p>\n                        </li>\n                    </div>\n                )\n            })\n        }\n    }\n\n    React.useEffect(() => {\n        console.log('getting updated babies list')\n        // if (getBabiesNow){\n        //     setGetBabiesNow(false)\n        //     const getBabies = async () => {\n        //         try{\n        //             const response = await get('http://localhost:8888/.netlify/functions/babies-index')\n        //             // const response = await get('https://baby-maker-2000.netlify.app/.netlify/functions/babies-index')\n        //             if (response.data.length === babies.length) {\n        //                 toast.error('Baby already made')\n        //             } else {\n        //                 toast.success(`Baby ${baby['baby-name']} was made!`)\n        //                 setBabies(response.data)\n        //             }\n        //         } catch(err) {\n    \n        //         }\n        //     }\n        //     getBabies()\n        // }\n    }, [babies.length])\n\n    const handleClick = async (e) => {\n        e.preventDefault()\n        let thisBaby = {}\n        for(let i = 0; i < babies.length; i++){\n            if(e.target.id === babies[i].baby_name){\n                thisBaby = babies[i]\n            }\n        }\n        \n        if (thisBaby.enabled){\n            thisBaby.enabled = false\n        } else {\n\n            thisBaby.enabled = true\n        }\n        let element = document.getElementById(thisBaby.baby_name)\n        element.style.textDecorationLine = thisBaby.enabled ? \"none\" : \"line-through\"\n\n        let babyRequest = {\n            \"baby\": {\n                \"list_id\": thisBaby.list_id,\n                \"baby_name\": thisBaby.baby_name,\n                \"enabled\": thisBaby.enabled\n            }\n        }\n        try{\n            await patch('https://baby-maker-2000.netlify.app/.netlify/functions/update-baby', babyRequest)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        let newBabyArray = babies\n        newBabyArray.push(baby)\n        dispatch(getBabies(newBabyArray))\n        fetch(\"/index.html\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n            },\n            body: encode({\"form-name\": \"baby\", ...baby})\n        })\n            .then(() => alert(\"Submitted!\"))\n            .catch(error => console.log(error))\n        setGetBabiesNow(true)\n        e.preventDefault()\n        \n    }\n\n    return(\n        <Container style={{ margin: '10px'}}>\n            <Row>\n                <Col>\n                    <Jumbotron>\n                        <h1>The Baby Maker 2000</h1>\n                        <p>Simply put in a name and it'll be saved!</p>\n                        <p>Note: To return to this list save your URL some where safe</p>\n                        <form id=\"form\" onSubmit={handleSubmit}>\n                            <div>\n                                <label>Name! </label>\n                                <div>\n                                    <input required id=\"name-input\" placeholder=\"Baby Name!\" type=\"text\" name=\"baby-name\" value={baby[\"baby-name\"]} onChange={e => dispatch(babyName(e.target.value))} />\n                                    <input hidden type=\"number\" name=\"list-id\" value={baby[\"list-id\"]} />\n                                </div>\n                            </div><br></br>\n                            <div>\n                                <button type=\"submit\" id=\"submit-button\">Make baby!</button>\n                            </div>\n                        </form>\n                    </Jumbotron>\n                </Col>\n                <Col style={{fontSize: \"24px\", textAlign: \"center\"}}>\n                    <h1>Baby Names!</h1>\n                    <ul id=\"name-list\" style={{listStyle: \"none\", overflowAnchor: \"bottom\", overflow: \"scroll\", height: \"50vh\"}}>\n                        {showBabies()}\n                    </ul>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default BabyNameForm;"]},"metadata":{},"sourceType":"module"}